#!/bin/bash

DEBUG=${DEBUG:-0}

if [[ $DEBUG != "0" ]]; then
    CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:-Debug}
    CMAKE_C_FLAGS=${CMAKE_C_FLAGS:--fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address -fsanitize=undefined -fsanitize-address-use-after-scope}
    LINKER_FLAGS=${LINKER_FLAGS:--fsanitize=address -fsanitize=undefined}
    C_FLAGS_DEBUG=${C_FLAGS_DEBUG:--g -O0}
    export LD_PRELOAD=$(gcc -print-file-name=libasan.so)
    echo "Debug mode activated!, with LD_PRELOAD: $LD_PRELOAD"
    echo "Version: 4"
fi

CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE:-Release}
BUILD_SHARED_LIBS=${BUILD_SHARED_LIBS:-On}
CMAKE_C_FLAGS=${CMAKE_C_FLAGS:-}
LINKER_FLAGS=${LINKER_FLAGS:-}
C_FLAGS_DEBUG=${C_FLAGS_DEBUG:-}

function error
{
    echo >&2 "Error: $1"
}

function abort
{
    error "$1"
    exit 1
}

if [ "$#" == "0" ]; then

    # This method of using this script has been deprecated.

    if [ -z ${GITHUB_USER+x} ]; then
        abort "GITHUB_USER is not set."
    fi

    if [ -z ${GITHUB_PROJECT+x} ]; then
        abort "GITHUB_PROJECT is not set."
    fi

    if [ -z ${DO_CMD+x} ]; then
        if test -e /usr/bin/sudo; then
            DO_CMD="sudo"
        else
            DO_CMD=""
        fi
    fi

else

    if [ "$#" != "1" ]; then
        abort "you must pass exactly one parameter"
    fi

    IFS=/ command eval 'read -ra GITHUB_PATH <<< "$1"'

    if [[ ${#GITHUB_PATH[@]} != 2 ]]; then
        abort "wrong format for github path"
    fi

    GITHUB_USER="${GITHUB_PATH[0]}"
    GITHUB_PROJECT="${GITHUB_PATH[1]}"

    # backward compatibility variable
    DO_CMD=""
fi

if [ -z ${INSTALL_PREFIX+x} ]; then
    INSTALL_PREFIX_OPT=""
else
    INSTALL_PREFIX_OPT="-DCMAKE_INSTALL_PREFIX=\"$INSTALL_PREFIX\""
fi

url=https://github.com/$GITHUB_USER/$GITHUB_PROJECT/releases/latest
http_code=$(curl -L -s -o /dev/null -w "%{http_code}" $url)
if [ "$http_code" -lt "200" ] || [ "$http_code" -gt "299" ]; then
    error "page error for <$url>, $http_code"
    echo >&2
    echo >&2 "$(curl -L -i $url 2>/dev/null)"
    exit 1
fi
version=$(curl -L -s $url 2>&1 | grep -oE releases\/tag\/\[0-9\]+\.\[0-9\]+\.\[0-9\]+ | head -n 1 | grep -oE \[0-9\]+\.\[0-9\]+\.\[0-9\]+)
orig_dir=$(pwd)
tarfile=$GITHUB_PROJECT-$version.tar.gz
tarurl=https://github.com/$GITHUB_USER/$GITHUB_PROJECT/archive/$version.tar.gz

function is_mingw32()
{
    if grep -qEi "MINGW32" /proc/version &>/dev/null; then
        return 0
    else
        return 1
    fi
}
if is_mingw32; then
    # to avoid warnings about incremental builds inside a temp directory
    # source: https://github.com/microsoft/LightGBM/pull/3162/files
    export TMPDIR="$USERPROFILE"
fi

tmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t $GITHUB_PROJECT)
logfile=$(mktemp 2>/dev/null || mktemp -t $GITHUB_PROJECT)

exec 3>"$logfile"

function cleanup
{
    exec 3>&-
    rm -rf "$tmpdir" >/dev/null 2>&1 || true
    cd "$orig_dir"
}
trap cleanup EXIT

function run_ldconfig
{
    if type ldconfig; then
        ldconfig
    fi
}

function is_wsl()
{
    if grep -qEi "(Microsoft|WSL)" /proc/version &>/dev/null; then
        return 0
    else
        return 1
    fi
}
if is_wsl; then
    url=https://gitforwindows.org
    abort "WSL is not supported. Please, open a Git Bash terminal ($url)"
fi

function is_unix
{
    case "$(uname -s)" in
    Linux*) return 0 ;;
    Darwin*) return 0 ;;
    *) return 1 ;;
    esac
}
if is_unix; then
    GENERATOR=""
else
    if [ -z ${ARCH+x} ]; then
        ARCH="x64"
    fi
    GENERATOR="-DCMAKE_GENERATOR_PLATFORM=$ARCH"
fi

function failed
{
    exec 3>&-
    echo "FAILED."
    echo
    echo "---------------------------------------- log begin ----------------------------------------"
    cat "$logfile"
    echo "----------------------------------------  log end  ----------------------------------------"
    echo
    echo "LOG: $logfile"
    exit 1
}
trap failed INT

function succeeded
{
    cleanup
    rm -rf "$logfile" >/dev/null 2>&1 || true
}

function cmake_cmd
{
    local cmd=""
    if type 2>&3 1>&3 cmake; then
        cmd="cmake"
    elif type 2>&3 1>&3 cmake.exe; then
        cmd="cmake.exe"
    else
        abort "could not find cmake (please, install it: https://cmake.org/download/)"
    fi
    echo $cmd
}
CMAKE=$(cmake_cmd)

function ctest_cmd
{
    local cmd=""
    if type 2>&3 1>&3 ctest; then
        cmd="ctest"
    elif type 2>&3 1>&3 ctest.exe; then
        cmd="ctest.exe"
    else
        abort "could not find ctest"
    fi
    echo $cmd
}
CTEST=$(ctest_cmd)

echo "[0/7] Library($GITHUB_PROJECT==$version)"
cd $tmpdir

echo -n "[1/7] Downloading... "
curl 2>&3 1>&3 -o $tarfile -L $tarurl
[ $? == 0 ] && echo "done." || failed

echo -n "[2/7] Extracting... "
[ -e $tarfile ] || failed
tar 2>&3 1>&3 xzf $tarfile || failed
[ -e ${tarfile%.tar.gz} ] || failed
cd 2>&3 1>&3 ${tarfile%.tar.gz} || failed
mkdir 2>&3 1>&3 build || failed
cd 2>&3 1>&3 build
[ $? == 0 ] && echo "done." || failed

echo -n "[3/7] Configuring... "
$CMAKE 2>&3 1>&3 -DCMAKE_BUILD_TYPE:STRING=$CMAKE_BUILD_TYPE \
    -DBUILD_SHARED_LIBS:STRING=$BUILD_SHARED_LIBS \
    -DCMAKE_C_FLAGS:STRING="$CMAKE_C_FLAGS" \
    -DCMAKE_SHARED_LINKER_FLAGS_INIT:STRING="$LINKER_FLAGS" \
    -DCMAKE_EXE_LINKER_FLAGS_INIT:STRING="$LINKER_FLAGS" \
    -DCMAKE_C_FLAGS_DEBUG:STRING="$C_FLAGS_DEBUG" $GENERATOR $INSTALL_PREFIX_OPT ..
[ $? == 0 ] && echo "done." || failed

echo -n "[4/7] Compiling... "
$CMAKE 2>&3 1>&3 --build . --config $CMAKE_BUILD_TYPE
[ $? == 0 ] && echo "done." || failed

echo -n "[5/7] Testing... "
$CTEST 2>&3 1>&3 --output-on-failure -C $CMAKE_BUILD_TYPE
[ $? == 0 ] && echo "done." || failed

echo "[6/7] Installing..."
$DO_CMD $CMAKE --build . --config $CMAKE_BUILD_TYPE --target install
[ $? == 0 ] && echo "done." || failed

echo -n "[7/7] Finalizing... "
run_ldconfig 2>&3 1>&3
[ $? == 0 ] && echo "done." || failed

succeeded
