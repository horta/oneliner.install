#!/bin/bash

function error
{
    echo >&2 "Error: $1"
}

function abort
{
    error "$1"
    exit 1
}

if [ "$#" == "0" ]; then

    # This method of using this script has been deprecated.

    if [ -z ${GITHUB_USER+x} ]; then
        abort "GITHUB_USER is not set."
    fi

    if [ -z ${GITHUB_PROJECT+x} ]; then
        abort "GITHUB_PROJECT is not set."
    fi

    if [ -z ${DO_CMD+x} ]; then
        if test -e /usr/bin/sudo; then
            DO_CMD="sudo"
        else
            DO_CMD=""
        fi
    fi

else

    if [ "$#" != "1" ]; then
        abort "you must pass exactly one parameter"
    fi

    IFS=/ command eval 'read -ra GITHUB_PATH <<< "$1"'

    if [[ ${#GITHUB_PATH[@]} != 2 ]]; then
        abort "wrong format for github path"
    fi

    GITHUB_USER="${GITHUB_PATH[0]}"
    GITHUB_PROJECT="${GITHUB_PATH[1]}"

    # backward compatibility variable
    DO_CMD=""
fi

if [ -z ${INSTALL_PREFIX+x} ]; then
    INSTALL_PREFIX_OPT=""
else
    INSTALL_PREFIX_OPT="-DCMAKE_INSTALL_PREFIX=\"$INSTALL_PREFIX\""
fi

url=https://github.com/$GITHUB_USER/$GITHUB_PROJECT/releases/latest
http_code=$(curl -L -s -o /dev/null -w "%{http_code}" $url)
if [ "$http_code" -lt "200" ] || [ "$http_code" -gt "299" ]; then
    error "page error for <$url>, $http_code"
    echo >&2
    echo >&2 "$(curl -L -i $url 2>/dev/null)"
    exit 1
fi
version=$(curl -L -s $url 2>&1 | grep -oE releases\/tag\/\[0-9\]+\.\[0-9\]+\.\[0-9\]+ | head -n 1 | grep -oE \[0-9\]+\.\[0-9\]+\.\[0-9\]+)
orig_dir=$(pwd)
tarfile=$GITHUB_PROJECT-$version.tar.gz
tarurl=https://github.com/$GITHUB_USER/$GITHUB_PROJECT/archive/$version.tar.gz

function set_tempdir
{
    fix=$1
    if tmpdir=$(mktemp -d --suffix=$fix 2>/dev/null); then
        return 0
    fi

    if tmpdir=$(mktemp -d -t $fix); then
        return 0
    fi

    abort "could not create a temporary directory"
}
set_tempdir $GITHUB_PROJECT

function set_logfile
{
    fix=$1
    if logfile=$(mktemp --suffix=$fix.log 2>/dev/null); then
        return 0
    fi

    if logfile=$(mktemp -t $fix.log); then
        return 0
    fi

    abort "could not create a log file"
}
set_logfile $GITHUB_PROJECT

exec 3>"$logfile"

function cleanup
{
    exec 3>&-
    rm -rf "$tmpdir" >/dev/null 2>&1 || true
    cd "$orig_dir"
}
trap cleanup EXIT

function silent_run
{
    eval $@ 2>&3 1>&3
}

function run_ldconfig
{
    if type ldconfig; then
        ldconfig
    fi
}

function is_unix
{
    case "$(uname -s)" in
    Linux*) return 0 ;;
    Darwin*) return 0 ;;
    *) return 1 ;;
    esac
}
if is_unix; then
    GENERATOR=""
else
    if [ -z ${ARCH+x} ]; then
        ARCH="x64"
    fi
    GENERATOR="-DCMAKE_GENERATOR_PLATFORM=$ARCH"
fi

function failed
{
    exec 3>&-
    echo "FAILED."
    echo
    echo "---------------------------------------- log begin ----------------------------------------"
    cat "$logfile"
    echo "----------------------------------------  log end  ----------------------------------------"
    echo
    echo "LOG: $logfile"
    exit 1
}
trap failed INT

function succeeded
{
    cleanup
    rm -rf "$logfile" >/dev/null 2>&1 || true
}

function cmake_cmd
{
    local cmd=""
    if silent_run type cmake; then
        cmd="cmake"
    elif silent_run type cmake.exe; then
        cmd="cmake.exe"
    else
        abort "could not find cmake (please, install it: https://cmake.org/download/)"
    fi
    echo $cmd
}
CMAKE=$(cmake_cmd)

function ctest_cmd
{
    local cmd=""
    if silent_run type ctest; then
        cmd="ctest"
    elif silent_run type ctest.exe; then
        cmd="ctest.exe"
    else
        abort "could not find ctest"
    fi
    echo $cmd
}
CTEST=$(ctest_cmd)

echo "[0/7] Library($GITHUB_PROJECT==$version)"
cd $tmpdir

echo -n "[1/7] Downloading... "
silent_run curl -o $tarfile -L $tarurl
[ $? == 0 ] && echo "done." || failed

echo -n "[2/7] Extracting... "
[ -e $tarfile ] || failed
silent_run tar xzf $tarfile || failed
[ -e ${tarfile%.tar.gz} ] || failed
silent_run cd ${tarfile%.tar.gz} || failed
silent_run mkdir build || failed
silent_run cd build
[ $? == 0 ] && echo "done." || failed

echo -n "[3/7] Configuring... "
silent_run $CMAKE -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=On $GENERATOR $INSTALL_PREFIX_OPT ..
[ $? == 0 ] && echo "done." || failed

echo -n "[4/7] Compiling... "
silent_run $CMAKE --build . --config Release
[ $? == 0 ] && echo "done." || failed

echo -n "[5/7] Testing... "
# Windows hacky
find test -name "*.exe" -exec chmod +x {} \;
silent_run $CTEST --output-on-failure -C Release
[ $? == 0 ] && echo "done." || failed

echo "[6/7] Installing..."
$DO_CMD $CMAKE --build . --config Release --target install
[ $? == 0 ] && echo "done." || failed

echo -n "[7/7] Finalizing... "
silent_run run_ldconfig
[ $? == 0 ] && echo "done." || failed

succeeded
