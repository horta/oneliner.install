#!/bin/bash

url=https://github.com/$GITHUB_USER/$GITHUB_PROJECT/releases/latest/download
version=$(curl -s $url 2>&1 | grep -oE \[0-9\]+\.\[0-9\]+\.\[0-9\]+)
orig_dir=$(pwd)
tarfile=$GITHUB_PROJECT-$version.tar.gz
tarurl=https://github.com/$GITHUB_USER/$GITHUB_PROJECT/archive/$version.tar.gz

function error
{
    >&2 echo "Error: $1"
}

function set_tempdir
{
    fix=$1
    if tmpdir=$(mktemp -d --suffix=$fix 2>/dev/null); then
        return 0
    fi

    if tmpdir=$(mktemp -d -t $fix); then
        return 0
    fi

    error "Could not create a temporary directory."
    exit 1
}
set_tempdir $GITHUB_PROJECT

function set_logfile
{
    fix=$1
    if logfile=$(mktemp --suffix=$fix.log 2>/dev/null); then
        return 0
    fi

    if logfile=$(mktemp -t $fix.log); then
        return 0
    fi

    error "Could not create a log file."
    exit 1
}
set_logfile $GITHUB_PROJECT

exec 3> "$logfile"

function cleanup
{
    exec 3>&-
    rm -rf "$tmpdir" >/dev/null 2>&1 || true
    cd "$orig_dir"
}
trap cleanup EXIT

function ctrl_c()
{
    echo "Log file path: $logfile"
}
trap ctrl_c INT

function silent_run
{
    eval "$@" 2>&3 1>&3
}

function do_then_sudo
{
    eval "$@"
    if [ $? != 0 ]; then
        eval "sudo $@"
    fi
    if [ $? != 0 ]; then
        # Preserve user's environment
        eval "sudo -E $@"
    fi
    if [ $? != 0 ]; then
        # Preserve user's environment
        eval "sudo env \"PATH=$PATH\" $@"
    fi
}

function run_ldconfig
{
    if type "ldconfig" >/dev/null 2>&1; then
        silent_run do_then_sudo ldconfig
    fi
}

function failed
{
    exec 3>&-
    echo "FAILED."
    echo "[_/6] Log output:"
    echo ""
    cat "$logfile"
    echo ""
    echo "Log file path: $logfile"
    exit 1
}

function succeeded
{
    cleanup
    rm -rf "$logfile" >/dev/null 2>&1 || true
}

echo "[0/6] Library($GITHUB_PROJECT==$version)"
cd $tmpdir

echo -n "[1/6] Downloading... "
silent_run curl -o $tarfile -L $tarurl
[ $? == 0 ] && echo "done." || failed

echo -n "[2/6] Extracting... "
[ -e $tarfile ] || failed
silent_run tar xzf $tarfile || failed
[ -e ${tarfile%.tar.gz} ] || failed
silent_run cd ${tarfile%.tar.gz} || failed
silent_run mkdir build || failed
silent_run cd build
[ $? == 0 ] && echo "done." || failed

echo -n "[3/6] Configuring... "
silent_run cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=On ..
[ $? == 0 ] && echo "done." || failed

echo -n "[4/6] Compiling... "
silent_run cmake --build . --config Release
[ $? == 0 ] && echo "done." || failed

echo -n "[5/6] Testing... "
silent_run ctest --output-on-failure -C Release
[ $? == 0 ] && echo "done." || failed

echo "[6/6] Installing..."
do_then_sudo cmake --build . --config Release --target install && run_ldconfig
[ $? == 0 ] && echo "done." || failed

succeeded
