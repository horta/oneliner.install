#!/bin/bash

if [ -z ${GITHUB_USER+x} ]; then
    >&2 echo "GITHUB_USER is not set."
    exit 1
fi

if [ -z ${GITHUB_PROJECT+x} ]; then
    >&2 echo "GITHUB_PROJECT is not set."
    exit 1
fi

if [ -z ${DO_CMD+x} ]; then
    if test -e /usr/bin/sudo; then
        DO_CMD="sudo"
    else
        DO_CMD=""
    fi
fi

if [ -z ${INSTALL_PREFIX+x} ]; then
    INSTALL_PREFIX_OPT=""
else
    INSTALL_PREFIX_OPT="-DCMAKE_INSTALL_PREFIX=\"$INSTALL_PREFIX\""
fi

function error
{
    >&2 echo "Error: $1"
}

url=https://api.github.com/repos/$GITHUB_USER/$GITHUB_PROJECT/releases/latest
http_code=$(curl -s -o /dev/null -w "%{http_code}" $url)
if [ "$http_code" -lt "200" ] || [ "$http_code" -gt "299" ]; then
    error "Page error for <$url>, $http_code."
    exit 1
fi
version=$(curl -s $url 2>&1 | grep -oE \"tag_name\":\ \"\[^\"\]\*\" | grep -oE \[0-9\]+\.\[0-9\]+\.\[0-9\]+)
orig_dir=$(pwd)
tarfile=$GITHUB_PROJECT-$version.tar.gz
tarurl=https://github.com/$GITHUB_USER/$GITHUB_PROJECT/archive/$version.tar.gz

function set_tempdir
{
    fix=$1
    if tmpdir=$(mktemp -d --suffix=$fix 2>/dev/null); then
        return 0
    fi

    if tmpdir=$(mktemp -d -t $fix); then
        return 0
    fi

    error "Could not create a temporary directory."
    exit 1
}
set_tempdir $GITHUB_PROJECT

function set_logfile
{
    fix=$1
    if logfile=$(mktemp --suffix=$fix.log 2>/dev/null); then
        return 0
    fi

    if logfile=$(mktemp -t $fix.log); then
        return 0
    fi

    error "Could not create a log file."
    exit 1
}
set_logfile $GITHUB_PROJECT

exec 3> "$logfile"

function cleanup
{
    exec 3>&-
    rm -rf "$tmpdir" >/dev/null 2>&1 || true
    cd "$orig_dir"
}
trap cleanup EXIT

function ctrl_c()
{
    echo "Log file path: $logfile"
}
trap ctrl_c INT

function silent_run
{
    eval "$@" 2>&3 1>&3
}

function run_ldconfig
{
    if $DO_CMD type ldconfig; then
        $DO_CMD ldconfig
    fi
}

function failed
{
    exec 3>&-
    echo "FAILED."
    echo "[_/7] Log output:"
    echo ""
    cat "$logfile"
    echo ""
    echo "Log file path: $logfile"
    exit 1
}

function succeeded
{
    cleanup
    rm -rf "$logfile" >/dev/null 2>&1 || true
}

echo "[0/7] Library($GITHUB_PROJECT==$version)"
cd $tmpdir

echo -n "[1/7] Downloading... "
silent_run curl -o $tarfile -L $tarurl
[ $? == 0 ] && echo "done." || failed

echo -n "[2/7] Extracting... "
[ -e $tarfile ] || failed
silent_run tar xzf $tarfile || failed
[ -e ${tarfile%.tar.gz} ] || failed
silent_run cd ${tarfile%.tar.gz} || failed
silent_run mkdir build || failed
silent_run cd build
[ $? == 0 ] && echo "done." || failed

echo -n "[3/7] Configuring... "
silent_run cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=On $INSTALL_PREFIX_OPT ..
[ $? == 0 ] && echo "done." || failed

echo -n "[4/7] Compiling... "
silent_run cmake --build . --config Release
[ $? == 0 ] && echo "done." || failed

echo -n "[5/7] Testing... "
silent_run ctest --output-on-failure -C Release
[ $? == 0 ] && echo "done." || failed

echo "[6/7] Installing..."
$DO_CMD cmake --build . --config Release --target install
[ $? == 0 ] && echo "done." || failed

echo -n "[7/7] Finalizing... "
silent_run run_ldconfig
[ $? == 0 ] && echo "done." || failed

succeeded
